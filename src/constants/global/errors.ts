import { SnackState } from '@types';

export const CONSOLE_EXCLUDED_ERROR_FRAGMENTS = [
  'MUI: ',
  'Warning: validateDOMNesting',
  'GET ',
  'POST ',
  'PUT ',
  '404 (Not Found)',
  'Error during service worker registration',
  'A bad HTTP response code (403) was received when fetching the script',
  'No routes matched location',
];

export enum ERROR_CODES {
  DEVICE_IS_NOT_UNIQUE = 'DEVICE_IS_NOT_UNIQUE',
  ERR_CANCELED = 'ERR_CANCELED',
  ERR_NETWORK = 'ERR_NETWORK',
  HD_PRESCRIPTION_CANNOT_BE_DELETED = 'HD_PRESCRIPTION_CANNOT_BE_DELETED',
  MEDICATION_CONFIRMATION_FREQUENCY_MISMATCH = 'MEDICATION_CONFIRMATION_FREQUENCY_MISMATCH',
  NO_APPOINTMENTS = 'NO_APPOINTMENTS',
  NEXT_HD_PRESCRIPTION_CANNOT_BE_FOUND = 'NEXT_HD_PRESCRIPTION_CANNOT_BE_FOUND',
  LAB_ORDER_NUMBER_ALREADY_EXISTS = 'LAB_ORDER_NUMBER_ALREADY_EXISTS',
  ERR_50000 = '50000',
  PATIENT_IS_NOT_UNIQUE = 'PATIENT_IS_NOT_UNIQUE',
  DIALYSIS_CANNOT_BE_STARTED_WITHOUT_HD_ACCESS = 'DIALYSIS_CANNOT_BE_STARTED_WITHOUT_HD_ACCESS',
  S3_FILE_IS_NOT_FOUND = 'S3_FILE_IS_NOT_FOUND',
  S3_ANTIVIRUS_ERROR = 'S3_ANTIVIRUS_ERROR',
  APPOINTMENT_HAS_OPEN_ENCOUNTER = 'APPOINTMENT_HAS_OPEN_ENCOUNTER',
}

export const ERROR_CUSTOM_SNACKS: { [key in keyof typeof ERROR_CODES]?: SnackState } = {};
